#!/usr/bin/python
# -*- coding: utf-8 -*-

from collections import namedtuple
import math
from pulp import *


distances = {}
n = [0]

Point = namedtuple("Point", ['x', 'y'])
class Facility(namedtuple("Facility", ['index', 'setup_cost', 'capacity', 'location'])):
    def __repr__(self):
        return f"F{self.index}"
class Customer(namedtuple("Customer", ['index', 'demand', 'location'])):
    def __repr__(self):
        return f"C{self.index}"

def length(point1, point2):
    return math.sqrt((point1.x - point2.x)**2 + (point1.y - point2.y)**2)


def get_length(node1, node2):
    key1 = (str(node1), str(node2))
    if key1 not in distances:
        l = length(node1.location, node2.location)
        key2 = (str(node2), str(node1))
        distances[key1] = l
        distances[key2] = l
    return distances[key1]


def solve_mip(customers, facilities, initial_solution=None, obj=0):
    # Returns status and a dict with key=item, value=variableValue at optimum
    path_to_cplex = r'cplex'
    p = LpProblem("P", LpMinimize)
    solver = CPLEX_CMD(path=path_to_cplex, msg=True, timeLimit=4000, warmStart= True, keepFiles=True)

    #Create variable dicts
    customer_facility_dict = [(c, f) for c in customers for f in facilities]
    customer_facility_var_dict = LpVariable.dicts("cust_fac", customer_facility_dict, cat=const.LpBinary)
    active_facility_var_dict = LpVariable.dicts("y_fac", facilities, cat=const.LpBinary)

    #Set objective function
    p += lpSum([facility.setup_cost * v for facility, v in active_facility_var_dict.items()] +
               [get_length(customer, facility) * v for (customer, facility), v in customer_facility_var_dict.items()])

    #Set constraints
    for facility in facilities:
        p += lpSum([customer.demand * customer_facility_var_dict[(customer, facility)] for customer in
                    customers]) <= facility.capacity
        for customer in customers:
            p += customer_facility_var_dict[(customer, facility)] <= active_facility_var_dict[facility]
    for customer in customers:
        p += lpSum([customer_facility_var_dict[(customer, facility)] for facility in facilities]) == 1

    #Warm start
    if initial_solution is not None:
        """for v in customer_facility_var_dict.values():
            v.setInitialValue(0)
        for v in active_facility_var_dict.values():
            v.setInitialValue(0)"""
        for i in range(len(initial_solution)):
            if initial_solution[i] != -1:
                customer = customers[i]
                facility = [f for f in facilities if f.index == initial_solution[i]][0]
                for (c, f), v in customer_facility_var_dict.items():
                    if f == facility:
                        #v.setInitialValue(1)
                        p += v >= 1
                    else:
                        #v.setInitialValue(0)
                        p += v <= 0
                #active_facility_var_dict[facility].setInitialValue(1)
                p += active_facility_var_dict[facility] >= 1

    #Optimize
    status = p.solve(solver)

    if status != const.LpStatusOptimal and status != const.LpStatusNotSolved:
        return status, obj, initial_solution

    solution = [-1]*len(customers)
    for (customer, facility), v in customer_facility_var_dict.items():
        if v.varValue > 0.9:
            solution[customer.index] = facility.index

    return status, p.objective.value(), solution


def get_trivial_solution(customers, facilities):
    # build a trivial solution
    # pack the facilities one by one until all the customers are served
    solution = [-1] * len(customers)
    capacity_remaining = [f.capacity for f in facilities]

    facility_index = 0
    for customer in customers:
        if capacity_remaining[facility_index] >= customer.demand:
            solution[customer.index] = facility_index
            capacity_remaining[facility_index] -= customer.demand
        else:
            facility_index += 1
            assert capacity_remaining[facility_index] >= customer.demand
            solution[customer.index] = facility_index
            capacity_remaining[facility_index] -= customer.demand

    used = [0] * len(facilities)
    for facility_index in solution:
        used[facility_index] = 1

    # calculate the cost of the solution
    obj = sum([f.setup_cost * used[f.index] for f in facilities])
    for customer in customers:
        obj += length(customer.location, facilities[solution[customer.index]].location)

    return obj, solution


def get_cheaty_solution(n):
    solution = None
    if n == 4:
        solution = [19,68,64,56,64,34,51,51,51,68,19,64,19,64,51,68,34,51,64,68,51,51,56,64,51,51,68,51,34,51,56,68,19,19,48,48,48,56,51,51,48,19,64,56,56,51,51,19,48,56,51,64,51,51,64,64,51,19,19,51,51,56,68,34,51,19,51,48,51,19,51,34,51,64,48,51,68,34,51,64,34,19,34,19,51,56,56,56,48,51,51,34,64,19,19,19,56,51,64,51,64,19,51,68,51,51,19,68,68,19,64,51,51,56,51,48,51,68,51,64,68,51,51,56,64,19,56,48,51,51,48,56,51,51,51,34,51,48,48,19,51,56,51,56,68,68,68,51,64,51,68,51,51,34,51,19,51,51,51,51,51,51,51,48,68,64,34,19,64,51,48,48,51,19,34,51,51,56,34,64,48,34,64,56,51,19,51,68,34,56,51,48,68,68,51,51,51,34,51,51,51,51,19,51,68,56,64,48,51,34,51,19,51,51,64,68,64,19,19,68,68,68,56,48,34,51,51,19,64,51,64,64,19,56,51,48,51,56,51,51,68,34,68,34,64,68,34,64,64,51,56,51,34,51,34,51,51,51,56,51,19,48,51,56,19,51,48,48,19,56,56,19,48,51,51,56,64,64,48,51,68,48,19,19,34,64,51,34,56,19,48,51,51,19,51,48,51,68,51,56,34,56,56,64,56,34,19,64,34,48,51,68,34,56,56,51,34,64,56,51,68,48,51,51,48,51,64,51,19,51,48,48,51,51,51,34,51,64,68,64,51,51,51,68,51,48,19,64,51,34,51,51,56,68,51,51,48,51,19,51,48,51,56,68,34,51,56,19,51,51,51,64,51,56,51,51,68,51,68,68,51,51,68,64,48,64,51,19,51,56,51,51,19,19,51,64,56,34,56,34,64,19,51,51,64,34,48,51,51,19,64,51,64,68,51,51,48,48,51,64,68,51,51,56,64,64,48,68,51,51,56,51,51,56,19,51,19,51,56,64,51,34,48,48,51,64,51,51,56,68,64,51,56,64,68,34,51,64,51,34,51,51,56,51,68,51,51,34,51,19,48,56,34,51,19,64,64,48,68,68,51,56,51,48,51,19,64,68,34,64,51,19,51,48,68,19,56,56,19,51,34,68,68,56,51,48,51,19,51,51,51,56,19,51,34,51,64,48,34,51,64,68,51,64,56,64,51,51,64,48,19,51,48,51,34,34,34,64,51,51,51,51,34,51,68,48,51,56,51,51,51,64,68,51,64,19,56,51,51,56,51,68,51,48,48,51,51,19,51,51,68,64,64,68,51,48,48,68,19,51,68,64,34,19,56,19,34,34,51,51,19,51,51,51,51,48,34,51,34,51,64,64,34,51,56,51,48,64,34,51,19,56,51,19,51,51,68,48,48,56,64,51,56,64,51,19,51,56,51,51,51,68,19,51,34,48,51,51,51,68,34,51,51,64,51,64,34,64,51,51,68,19,19,19,51,34,51,34,51,56,48,68,51,51,51,48,34,51,19,64,19,51,51,68,48,64,64,68,51,51,34,48,48,64,51,64,64,56,51,68,51,51,64,48,51,51,68,34,34,19,51,51,34,51,48,51,34,51,56,64,48,64,51,34,48,19,51,51,51,51,68,68,48,51,51,34,51,51,34,64,68,51,68,51,64,34,68,64,51,19,51,51,56,68,68,19,19,64,19,34,48,64,51,34,64,19,56,64,51,51,64,51,51,19,56,64,19,51,48,34,51,48,19,51,51,56,56,51,51,51,51,51,64,51,51,48,51,51,19,51,34,51,19,56,51,51,56,48,19,19,51,34,51,51,19,64,19,48,56,51,48,68,48,64,64,48,51,48,64,68,56,51,56,64,56,34,34,51,68,19,64,51,64,48,51,64,64,51,64,51,51,68,48,64,64,64,51,56,48,68,51,56,51,51,34,51,51,19,51,19,51,56,68,64,64,19,51,64,48,51,51,51,48,51,51,68,64,64,48,68,19,51,64,64,51,48,51,51,51,19,34,64,51,51,51,51,56,19,51,51,48,68,64,68,51,19,51,51,51,48,51,51,34,68,51,68,56,56,56,51,56,19,19,64,64,19,51,64,68,56,51,56,48,48,51,51,51,64,51,34,64,48,51,68,51,34,51,48,51,56,51,51,34,51,68,48,68,51,34,19,34,34,56,68,56,48,64,48,51,19,68,51,56,56,68,64,48,64,68,64,51,64,51,51,51,68,19,68,51,19,56,64,51,51,64,56,19,51,19,51]
    elif n == 5:
        solution = [155,0,132,66,76,33,116,120,6,161,167,19,35,98,136,183,99,169,-1,46,60,85,139,192,167,9,95,118,51,105,68,180,72,175,3,28,149,157,120,199,108,49,-1,175,142,35,76,9,123,30,133,18,4,157,90,99,-1,3,160,118,183,167,3,26,51,37,25,25,90,198,18,162,146,86,60,118,101,70,159,30,123,132,57,92,37,71,146,153,2,180,18,30,139,98,85,33,141,94,162,90,113,108,149,119,46,118,175,192,140,173,144,99,34,120,28,30,165,33,139,69,37,32,185,134,0,171,108,192,6,197,66,6,76,4,123,155,98,66,49,18,105,60,85,133,69,32,140,3,119,4,142,92,160,165,0,113,176,22,146,146,32,101,160,123,118,32,121,9,105,123,-1,135,146,85,49,32,22,185,45,95,167,9,60,94,199,139,177,177,-1,-1,118,26,178,60,49,26,35,100,185,123,144,68,9,119,176,183,136,86,19,173,121,114,28,25,68,94,4,-1,165,116,92,72,175,28,99,34,165,134,60,186,55,177,32,2,160,114,99,6,94,159,85,133,123,118,167,37,100,95,100,105,197,45,-1,35,45,133,134,134,172,90,89,9,7,152,101,28,186,-1,133,30,198,85,126,153,126,173,4,98,19,132,-1,34,137,161,71,45,169,2,100,116,113,123,-1,114,37,0,157,167,-1,152,-1,70,180,94,113,52,159,46,70,76,18,120,175,26,-1,197,26,169,157,137,28,199,185,169,116,199,101,86,135,141,116,120,118,198,159,22,25,51,30,35,144,22,134,178,114,71,70,89,161,3,19,69,171,168,69,185,185,135,108,35,90,141,25,89,126,183,126,116,171,79,51,-1,34,101,197,92,70,68,92,79,0,71,116,100,66,57,165,119,153,69,51,157,133,89,0,178,161,180,98,178,76,140,90,45,35,180,137,79,105,192,-1,79,175,183,-1,94,169,113,-1,178,139,92,9,120,0,159,70,198,197,-1,116,120,155,144,68,71,69,52,153,159,186,188,6,3,159,7,188,57,57,60,18,99,7,37,-1,183,19,173,157,26,188,34,7,34,132,173,22,159,167,136,136,142,137,26,46,152,25,25,22,71,141,126,70,144,101,113,114,144,68,137,113,89,171,30,141,133,135,146,3,172,132,186,46,144,186,52,69,119,0,188,149,144,45,89,45,176,22,197,162,95,100,160,114,22,175,7,188,123,180,9,19,119,178,3,144,9,159,7,45,186,144,123,70,177,168,173,71,140,120,60,72,160,159,71,192,177,2,167,70,142,139,135,161,186,173,86,6,108,92,146,94,66,101,34,55,32,92,176,95,34,72,168,135,2,68,149,198,-1,-1,137,28,160,185,89,172,176,140,101,146,142,157,114,160,139,114,183,94,66,197,188,46,171,183,183,157,3,119,141,108,108,171,72,7,98,33,6,33,95,4,177,165,192,3,160,26,0,135,176,101,134,185,72,149,199,192,198,-1,121,94,49,134,121,199,66,72,197,162,185,92,68,173,121,-1,167,57,165,2,134,-1,95,142,95,141,133,7,51,26,137,57,19,72,60,46,126,85,45,136,30,71,86,178,197,37,171,178,-1,185,167,142,66,34,168,175,32,100,165,55,153,199,57,4,114,146,51,2,19,66,72,19,157,51,180,101,173,98,118,4,28,52,-1,90,85,9,34,114,52,51,60,186,34,60,185,60,76,186,144,28,-1,137,153,161,30,69,139,135,76,157,168,37,57,79,185,116,173,172,140,94,7,52,185,168,133,133,183,105,51,152,69,32,175,113,33,169,105,26,-1,33,141,139,0,86,157,199,108,178,79,22,114,162,105]
    elif n == 6:
        solution = [0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,20,20,20,20,20,20,20,20,20,20,20,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29,29,30,30,30,30,30,30,30,30,30,30,30,30,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,32,32,32,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35,36,36,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37,37,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,38,38,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,40,40,40,40,40,40,40,40,40,40,40,40,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,43,43,43,43,43,43,43,43,43,43,43,43,43,43,44,44,44,44,44,44,44,44,44,44,44,44,45,45,45,45,45,45,45,45,45,45,45,45,45,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,48,48,48,48,48,48,48,48,48,48,48,48,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,50,50,50,50,50,50,50,50,50,50,50,50,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,53,53,53,53,53,53,53,53,53,53,53,53,53,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,55,55,55,55,55,55,55,55,55,55,55,55,55,55,56,56,56,56,56,56,56,56,56,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,59,59,59,59,59,59,59,59,59,59,59,59,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,62,62,62,62,62,62,62,62,62,62,62,62,63,63,63,63,63,63,63,63,63,63,63,63,63,63,64,64,64,64,64,64,64,64,64,64,64,64,64,64,65,65,65,65,65,65,65,65,65,65,65,65,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,67,67,67,67,67,67,67,67,67,67,68,68,68,68,68,68,68,68,68,68,68,68,68,69,69,69,69,69,69,69,69,69,69,69,69,70,70,70,70,70,70,70,70,70,70,70,70,70,71,71,71,71,71,71,71,71,72,72,72,72,72,72,72,72,72,72,72,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,74,74,74,74,74,74,74,74,74,74,74,74,75,75,75,75,75,75,75,75,75,75,75,75,75,75,76,76,76,76,76,76,76,76,76,76,76,76,77,77,77,77,77,77,77,77,77,77,77,77,77,77,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,79,79,79,79,79,79,79,79,79,79,79,79,80,80,80,80,80,80,80,80,80,80,80,80,80,80,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,83,83,83,83,83,83,83,83,83,83,83,83,83,83,84,84,84,84,84,84,84,84,84,84,84,84,85,85,85,85,85,85,85,85,85,85,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,90,90,90,90,90,90,90,90,90,90,90,90,90,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,94,94,94,94,94,94,94,94,94,94,94,94,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,96,96,96,96,96,96,96,96,96,96,96,96,97,97,97,97,97,97,97,97,97,97,97,97,97,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,99,99,99,99,99,99,99,99,99,99,99,99,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,102,102,102,102,102,102,102,102,102,102,102,102,103,103,103,103,103,103,103,103,103,103,103,103,103,104,104,104,104,104,104,104,104,104,104,104,104,104,105,105,105,105,105,105,105,105,105,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,107,107,107,107,107,107,107,107,107,107,107,107,108,108,108,108,108,108,108,108,108,108,108,108,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,110,110,110,110,110,110,110,110,110,110,110,110,111,111,111,111,111,111,111,111,111,111,111,111,111,111,112,112,112,112,112,112,112,112,112,112,112,112,112,112,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,114,114,114,114,114,114,114,114,114,114,114,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,117,117,117,117,117,117,117,117,117,117,117,117,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,126,126,126,126,126,126,126,126,126,127,127,127,127,127,127,127,127,127,127,127,127,127,127,128,128,128,128,128,128,128,128,128,128,128,128,129,129,129,129,129,129,129,129,129,129,129,129,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,131,131,131,131,131,131,131,131,131,131,131,131,131,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,133,133,133,133,133,133,133,133,133,133,133,133,134,134,134,134,134,134,134,134,134,134,134,134,134,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,136,136,136,136,136,136,136,136,136,136,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,138,138,138,138,138,138,138,138,138,138,138,138,138,138,138,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,140,140,140,140,140,140,140,140,140,140,140,140,140,140,141,141,141,141,141,141,141,141,141,141,141,141,141,142,142,142,142,142,142,142,142,142,142,142,142,142,143,143,143,143,143,143,143,143,143,143,143,143,143,143,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,144,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,146,146,146,146,146,146,146,146,146,146,146,146,146,146,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,149,149,149,149,149,149,149,149,149,149,149,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,151,151,151,151,151,151,151,151,151,151,151,151,151,151,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,153,153,153,153,153,153,153,153,153,153,153,153,153,153,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,156,156,156,156,156,156,156,156,156,156,156,156,156,156,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,158,158,158,158,158,158,158,158,158,158,158,158,159,159,159,159,159,159,159,159,159,159,159,159,159,159,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,163,163,163,163,163,163,163,163,163,163,163,163,163,163,164,164,164,164,164,164,164,164,164,164,164,164,164,165,165,165,165,165,165,165,165,165,165,165,166,166,166,166,166,166,166,166,166,166,166,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,169,169,169,169,169,169,169,169,169,169,169,169,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,175,175,175,175,175,175,175,175,175,175,175,175,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,177,177,177,177,177,177,177,177,177,177,177,177,178,178,178,178,178,178,178,178,178,178,178,178,178,178,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,180,180,180,180,180,180,180,180,180,180,180,180,181,181,181,181,181,181,181,181,181,181,181,181,182,182,182,182,182,182,182,182,182,182,182,182,183,183,183,183,183,183,183,183,183,183,183,183,183,183,184,184,184,184,184,184,184,184,184,184,184,184,184,184,185,185,185,185,185,185,185,185,185,185,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,193,193,193,193,193,193,193,193,193,193,193,193,193,193,194,194,194,194,194,194,194,194,194,194,194,195,195,195,195,195,195,195,195,195,195,196,196,196,196,196,196,196,196,196,196,196,196,196,196,197,197,197,197,197,197,197,197,197,197,198,198,198,198,198,198,198,198,198,198,198,198,199,199,199,199,199,199,199,199,199,199,199,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,202,202,202,202,202,202,202,202,202,202,202,202,202,202,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,204,204,204,204,204,204,204,204,204,204,204,204,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,208,208,208,208,208,208,208,208,208,208,208,208,208,208,209,209,209]
    elif n == 7:
        solution = [518,110,321,497,96,926,393,697,893,485,746,832,169,188,593,172,34,494,669,559,805,867,397,502,-1,41,-1,14,115,137,773,641,257,397,322,102,44,530,77,699,596,678,521,15,-1,678,817,329,435,204,821,469,295,31,-1,101,391,328,638,999,781,407,592,884,599,0,596,259,961,912,804,98,873,505,370,193,431,129,471,402,370,407,521,427,106,912,959,187,607,24,949,499,188,7,959,766,197,275,962,594,403,339,81,-1,929,961,962,403,534,837,735,27,971,610,78,499,306,137,379,541,127,885,257,496,912,415,97,44,607,830,497,646,836,822,479,517,956,479,720,235,322,679,361,932,893,780,2,994,869,123,856,609,742,479,705,324,101,978,804,114,844,360,858,437,101,818,77,140,669,885,286,559,567,251,152,886,213,443,190,496,119,275,731,796,763,863,699,967,120,821,832,960,175,676,207,26,734,558,999,963,228,409,98,350,257,281,354,766,379,880,817,780,176,750,875,478,329,707,455,956,391,63,204,-1,819,157,216,463,97,54,8,682,61,103,822,694,985,490,553,94,322,652,940,115,306,984,115,810,437,844,524,506,273,452,264,452,259,505,328,136,698,61,805,830,947,234,505,394,455,213,735,240,400,199,977,772,884,772,873,362,574,867,393,124,230,502,60,932,31,268,984,188,809,19,246,765,400,464,233,610,279,54,567,128,895,941,459,213,844,162,514,287,368,295,471,627,972,78,858,735,333,-1,791,716,791,850,863,786,681,594,96,466,379,402,861,361,816,192,747,235,81,687,271,912,747,119,970,633,535,56,586,627,716,564,-1,-1,261,574,165,705,781,265,856,342,875,809,23,479,475,497,65,-1,780,740,144,776,932,940,-1,15,47,546,41,856,698,408,47,541,575,618,763,339,969,506,886,453,0,306,8,963,279,646,548,612,311,56,233,228,977,212,279,185,218,861,-1,933,293,544,967,478,590,14,505,936,351,629,210,190,415,308,766,731,-1,209,524,956,770,983,686,592,124,904,114,485,132,776,705,394,936,687,297,39,343,384,293,772,592,19,38,333,36,819,47,574,27,229,880,494,60,-1,340,813,574,281,225,91,246,292,837,252,213,817,517,429,954,746,961,548,2,264,356,85,110,232,920,611,252,380,619,618,115,431,936,413,308,406,544,869,576,356,796,14,187,199,209,36,373,652,339,679,62,34,324,475,644,971,340,136,972,128,354,27,88,152,-1,136,275,525,524,974,225,287,796,127,193,36,207,413,794,532,292,633,849,241,343,669,628,566,612,402,971,216,7,514,681,525,484,697,566,850,553,600,26,867,63,885,-1,796,855,3,652,720,-1,233,895,763,438,204,751,611,772,380,15,232,65,229,802,750,494,146,676,388,273,140,781,286,524,23,362,869,363,698,265,86,429,524,859,644,-1,621,65,904,321,816,391,629,960,948,734,259,974,816,453,711,984,406,546,124,85,992,977,34,794,621,920,4,329,464,791,953,805,899,175,4,747,648,19,612,644,705,-1,265,545,14,746,631,351,818,682,31,360,391,716,132,776,140,843,233,24,770,949,217,-1,590,983,97,590,564,408,884,466,830,641,960,384,235,861,974,963,362,817,406,455,855,926,493,804,176,960,887,384,734,351,292,893,692,697,856,466,466,534,410,530,165,72,169,413,972,259,475,268,362,120,686,497,92,367,880,830,235,-1,2,873,929,633,199,88,985,477,992,802,217,967,431,-1,259,150,521,970,350,947,805,678,735,273,61,631,974,197,954,953,8,207,699,406,612,965,586,-1,532,802,368,562,261,329,175,118,394,233,409,532,343,205,994,279,388,273,564,425,149,207,252,373,541,452,546,920,190,241,257,292,101,499,197,518,707,786,596,858,698,843,466,363,644,751,336,240,698,339,197,887,123,506,517,562,268,44,435,24,193,887,681,228,773,435,118,971,162,765,120,442,3,594,418,144,370,410,215,426,167,54,609,776,437,4,553,750,328,493,610,173,686,225,711,863,427,311,7,241,985,81,558,471,281,669,514,819,564,318,548,765,283,94,600,92,983,810,329,575,494,855,926,730,566,3,410,103,567,652,514,972,963,287,306,813,426,926,463,209,822,694,328,781,954,271,544,209,887,442,94,832,843,129,746,391,96,676,78,368,92,871,954,813,352,149,65,228,548,362,880,648,38,418,856,837,293,114,192,339,933,336,374,893,120,185,502,600,505,530,659,641,687,185,361,91,967,426,306,342,687,252,592,193,453,453,750,39,978,485,871,609,373,232,210,477,110,283,351,413,740,929,403,-1,731,986,697,711,590,114,-1,855,383,676,912,-1,619,618,146,261,199,78,368,995,746,118,103,210,150,887,796,484,402,415,-1,418,659,766,941,86,318,810,297,367,692,953,807,-1,506,137,393,532,218,119,918,445,152,252,978,461,62,627,679,809,740,212,679,77,380,524,110,962,553,936,492,709,859,534,-1,895,295,431,628,844,875,458,969,986,506,114,426,230,970,431,875,199,807,548,923,120,106,192,959,803,388,165,176,455,499,817,205,885,86,34,837,599,970,63,85,929,496,786,85,-1,88,716,521,995,209,822,858,692,-1,803,225,379,873,478,383,999,413,445,941,132,669,26,967,978,995,293,707,869,342,129,545,235,-1,734,692,767,977,576,735,490,895,408,374,246,576,534,995,-1,641,711,899,459,256,234,378,-1,461,816,949,352,-1,124,137,947,63,466,193,863,246,425,175,867,350,475,933,558,-1,27,648,176,204,918,835,77,541,256,940,810,567,947,427,0,679,747,458,-1,-1,167,102,229,-1,-1,293,899,229,442,3,136,175,251,165,948,445,144,886,954,631,62,0,621,356,123,871,41,429,813,157,240,773,336,378,638,14,-1,352,459,497,546,599,794,190,821,594,832,187,948,62,354,7,256,886,187,98,264,731,407,923,98,699,333,295,14,638,150,628,-1,409,286,331,452,265,576,438,627,400,354,594,397,541,770,268,378,751,499,593,544,575,948,682,490,803,648,886,146,959,368,308,331,765,742,763,802,374,172,805,127,331,185,367,360,999,120,96,525,959,948,129,849,443,118,742,611,442,977,297,535,611,545,-1,518,297,751,646,493,514,517,709,770,932,986,261,818,961,956,767,818,859,445,816,843,464,893,586,458,530,400,709,286,213,809,694,530,936,106,803,443,-1,217,646,766,875,132,230,215,445,15,343,628,767,360,173,458,621,682,61,295,629,212,596,678,418,849,969,574,367,635,127,132,61,596,24,429,459,26,884,205,128,352,-1,496,559,986,484,493,772,-1,188,72,204,593,114,374,747,15,809,791,940,384,899,2,31,629,146,807,546,836,638,628,679,286,638,492,279,559,4,251,63,-1,832,849,475,804,234,435,478,218,-1,485,835,281,81,350,992,835,408,553,681,425,293,92,469,676,23,627,271,241,128]
    elif n == 8:
        solution = [1701,1867,1363,484,335,252,1344,70,297,401,829,1076,711,1280,987,626,1942,198,935,801,927,1927,1188,1712,1287,859,940,756,405,1391,462,1041,688,925,891,1363,430,1285,595,986,1327,161,1830,380,1701,814,1622,793,557,122,1538,1778,586,783,1806,1915,99,336,1774,977,1869,1562,1739,1651,553,1436,1116,1173,787,1121,675,645,247,787,624,530,1106,118,912,1658,1625,556,1118,772,496,1831,620,1391,1393,1411,1871,1787,425,1038,1357,693,1847,1725,1247,1185,848,299,1035,297,14,1706,1242,1238,394,1837,315,1064,71,925,979,1336,1516,723,1562,1509,1221,891,1116,1483,1499,1382,882,985,1520,1427,1373,1000,1698,1207,1333,957,730,1637,696,1724,1176,1207,1867,1227,1800,1486,536,1229,791,1869,708,1650,578,2,1038,1010,1234,536,1394,1847,1906,1099,1562,1783,441,208,328,361,1873,1566,1212,1538,1601,1495,1121,275,1963,1577,900,940,1362,783,1127,1751,1350,1393,711,760,876,1911,474,687,1342,331,430,10,1329,1717,1251,214,1704,1972,170,700,257,55,1176,814,195,256,976,441,105,1470,1903,1888,1910,626,700,1541,1151,1221,1725,483,1837,1185,1501,1538,945,1564,691,1036,1461,1311,272,1873,772,533,198,1268,1333,1566,20,940,1299,760,611,1508,1817,1681,1935,1291,906,1947,1460,1346,1029,1382,1744,1492,376,1657,1010,1489,624,1430,1234,1463,1593,1155,789,1470,1297,1670,775,679,1193,624,72,495,1717,1574,1270,1590,556,107,297,1483,1462,1783,1619,848,298,55,434,1242,259,944,1299,945,985,1601,882,1324,519,1653,989,1402,105,1000,1680,1889,10,961,1831,963,708,715,141,1619,226,1893,484,595,973,1215,141,1972,281,1867,1173,1095,1700,796,675,1584,1123,434,430,1158,1661,1596,1332,1914,514,1686,1802,1351,1372,1151,1460,1079,1458,1751,1029,1665,1221,697,1402,576,490,1061,738,1530,787,776,1711,1950,1521,1570,1525,1717,161,1292,835,474,626,1756,1269,1802,687,827,1513,1806,180,614,813,1112,1572,789,196,1555,525,793,497,883,1744,1513,963,1067,814,550,1296,1495,1756,1837,1564,562,193,140,1464,645,1963,1280,1388,1601,1942,1041,1670,1513,386,961,606,147,1304,1520,59,376,1642,662,256,100,1879,1317,729,364,1625,703,107,1895,1538,495,711,1144,1685,1506,703,71,587,302,715,432,876,147,1751,335,956,1851,1889,1438,580,866,776,59,141,1362,1344,1669,1373,1717,691,1400,425,385,1568,1545,1151,1173,1647,62,1781,361,1123,700,1637,331,231,483,1896,1633,425,398,866,522,1601,580,118,716,42,1744,496,1000,618,1642,1362,118,1158,525,196,53,1378,1966,1696,1312,1991,1188,830,1145,1351,1713,1414,1748,773,53,348,1060,1299,170,1461,607,1555,1674,17,985,364,1212,579,1681,302,1203,1746,1266,1234,958,144,1602,62,1879,404,559,1357,876,1400,1434,1541,1665,1562,99,1221,1397,1173,986,961,1690,451,1054,618,477,1525,1206,74,1686,1658,1506,409,1704,729,1637,462,550,1376,1127,1038,773,1426,961,1635,1611,927,1461,1624,874,1903,945,1681,1010,1266,1388,31,1430,1355,72,1958,1502,328,652,1622,144,31,1879,196,398,619,385,1514,1299,1695,1360,252,1429,1743,1076,1230,1724,963,323,1346,937,1321,141,1999,806,809,1743,247,572,1669,1625,606,331,1739,72,1781,203,696,1685,1215,1528,1400,1671,1032,17,789,989,1317,1207,607,1695,897,1966,1176,806,576,587,105,1517,1035,1311,401,1516,421,1570,122,404,1012,1282,1238,852,1359,1342,364,1403,441,184,1958,916,1473,1242,1203,1118,647,791,42,1796,831,1350,193,1462,105,1830,1158,1653,555,1497,1036,1311,1233,74,1359,1397,1464,1595,827,1287,795,1404,1748,495,277,1739,715,59,851,1746,795,1903,1787,71,1463,1506,1021,1873,1851,1521,909,1590,1284,519,603,1690,1327,195,79,1906,566,1336,749,1346,956,1234,284,1343,1067,474,831,259,1287,858,1038,287,184,176,1927,1903,271,243,835,1409,1622,1397,527,893,354,284,1071,1914,1495,107,1426,1568,927,432,1382,1869,1391,773,1230,2,1332,1642,992,302,1215,1848,1830,348,110,572,1585,252,1333,404,1698,527,1650,394,42,1555,1696,147,848,1712,1404,1772,1895,1521,1079,1012,1403,110,1497,361,1036,364,1647,272,319,180,256,1783,756,1336,514,347,1586,21,779,1041,1783,992,992,514,1746,1690,586,1101,1483,1802,937,1492,578,795,1597,1685,693,813,333,1615,1830,1489,687,1375,1145,232,1193,1831,319,1383,1774,1492,654,259,1463,1462,1103,1127,1713,1125,1329,1112,858,1296,1116,906,385,1788,1893,1426,1508,243,1438,1965,1772,595,1545,1590,679,1351,1657,1000,579,271,1725,1497,550,1987,1071,1012,1942,79,1270,1650,1658,775,477,1297,1394,723,1041,1324,1440,1125,891,409,1871,1514,909,1910,128,619,987,256,1602,649,71,1756,956,559,607,406,536,1378,195,645,1585,708,72,525,1577,587,495,490,408,1095,1329,1317,1697,1958,1251,1121,1796,493,1060,1044,1593,1700,21,1436,436,1462,649,1946,1233,600,1680,556,1701,298,858,1203,1658,1032,1800,893,1651,1950,1545,1359,1572,944,1934,214,986,940,957,1424,380,1247,1230,1708,496,1230,1118,1067,1914,1635,779,1073,1635,207,973,367,976,323,1346,1394,483,1743,700,1103,645,123,469,830,1317,791,140,354,287,1061,1282,688,1611,989,1355,1772,835,851,207,708,361,1633,1470,380,566,1538,1332,1888,1329,1103,409,380,723,957,256,1414,1711,70,315,432,1445,1125,773,408,1483,1101,1653,738,1071,192,1007,436,493,1570,1750,386,1267,647,1574,1468,260,1701,1207,1409,323,1942,611,483,579,1659,1292,1445,611,128,989,830,900,1893,1242,987,1436,1203,1516,1746,1144,795,1424,716,1390,1974,147,408,897,1118,1963,1473,1411,1696,1844,656,275,226,687,827,1460,580,738,1287,231,1324,1499,1375,883,1112,70,708,1568,789,1781,527,1934,1099,587,1251,1947,1462,436,1361,918,1724,1424,170,1638,335,574,1188,562,1007,973,614,10,1796,656,1390,1361,774,441,817,1844,580,1708,1029,1653,1781,1566,883,809,1661,1974,203,519,530,207,944,1896,1366,1570,477,49,1704,409,1831,10,107,1064,1935,79,469,1233,1680,1079,866,525,1406,1711,1837,1397,462,1501,1391,1974,1458,105,796,1212,1393,1267,852,238,574,1015,271,1698,1595,323,1127,691,1267,586,813,900,1852,1871,1394,1502,364,603,1974,1911,1054,1424,1513,406,1911,600,333,1436,328,1311,1015,662,336,257,1852,1280,347,716,55,977,348,1390,1657,376,1284,874,774,1800,1440,348,99,876,1910,1106,1238,715,436,161,214,530,956,595,406,1635,1923,1748,650,1622,1586,1935,852,176,1525,927,859,1373,1596,1502,1848,652,1144,882,1382,490,1852,656,184,1458,184,1361,1034,801,20,992,916,493,1106,1429,1750,793,916,620,1185,1468,1430,900,1972,1060,772,299,1671,1297,1602,562,14,53,654,1383,315,562,1611,1054,1383,1597,1366,1292,1270,462,1064,1857,1247,1508,1520,1848,226,1101,1848,1509,801,809,49,1704,618,1686,1085,918,297,1061,1417,1912,1750,649,122,1438,1999,49,1206,647,586,774,1427,70,203,260,1593,650,20,1155,1778,1585,1851,1445,1403,852,1434,1896,20,284,783,1361,618,1708,1073,1373,806,195,1871,925,973,1427,494,1015,398,935,796,913,14,1304,405,986,1889,193,315,1934,1342,1332,992,55,624,574,100,1072,1697,1397,1564,806,533,909,1712,275,650,319,1010,1847,830,595,297,257,1817,1229,180,1906,74,1486,1748,1072,647,1802,1597,600,1942,579,1350,1965,1227,1363,1489,1611,1597,1296,1910,434,1400,1125,1852,1525,260,913,1212,386,1312,128,1468,1593,536,389,1282,977,99,1327,1394,477,1282,1947,971,1577,958,1402,1509,1585,1704,1085,858,555,17,930,401,1329,287,1785,555,1021,247,243,1555,930,1772,553,1857,122,1638,1021,421,1268,100,1595,1434,835,806,1541,1430,1817,1915,574,1514,1665,1429,367,1633,1375,1155,1123,1417,1657,1774,1941,1101,1680,1390,957,1785,110,17,1470,1796,1586,1360,1499,1404,1461,796,1914,654,1669,421,1409,281,1651,576,603,1464,1625,650,367,328,1509,198,579,1584,1915,1788,1291,859,1366,1284,354,730,916,1007,851,945,688,1671,1072,1659,1417,1787,882,451,1987,572,749,1895,1700,207,1572,1958,469,1312,620,1438,1586,1360,405,626,774,1193,1647,1229,912,1103,703,697,913,1233,1486,1637,238,1099,1950,1021,1895,1788,272,1788,620,1896,495,1756,1344,1800,1357,161,389,1528,1697,1674,916,1234,533,1987,1372,1584,1342,1429,533,1946,1060,1659,514,566,140,425,1743,700,247,1144,789,1712,1064,1291,1185,367,62,738,1661,497,893,1388,1375,1333,348,557,404,493,1889,1360,193,1464,519,1711,394,1674,336,691,1336,196,687,1642,243,874,1145,1965,662,281,1669,198,1266,1350,976,1034,1915,730,232,1116,614,1651,1188,1406,421,957,971,484,775,760,654,697,1577,578,184,140,1061,1343,1857,1501,62,829,1934,533,284,1965,1987,1923,693,1568,522,1638,1987,1085,1312,572,977,1783,606,1528,1099,31,1032,1739,749,831,961,1468,192,144,1750,1674,715,1638,1101,1071,1686,1445,497,1713,1707,277,1999,1095,1035,600,647,1321,1670,1501,1619,1076,430,1073,1351,935,1661,912,958,716,688,1584,1966,1633,1681,1847,1927,1473,1486,1911,1378,302,791,1015,123,1406,918,1123,389,930,1851,1647,1427,1516,1106,1072,1034,1751,1285,1572,1296,1665,776,1285,331,1596,906,231,827,522,1906,614,619,1034,1426,696,1690,1304,1633,1463,795,1343,192,238,484,287,406,1778,1638,1376,1707,1060,1402,1044,1950,1270,891,829,1036,398,656,271,1772,1530,1788,1269,1743,208,1355,912,1585,1440,100,1706,1888,1268,607,21,1296,1282,1941,963,1685,257,432,1203,944,451,813,1517,1125,1615,1116,1596,1044,937,1227,231,1785,1572,1972,79,1492,1624,21,893,1787,1411,831,469,335,652,1574,787,347,1269,557,1963,1923,1251,1044,1372,1327,1912,1095,557,1266,1590,817,697,-1,1725,243,679,787,675,1375,1346,918,118,497,1566,287,299,772,494,1158,1489,1999,897,971,302,779,1497,238,729,553,675,1393,451,1284,347,208,693,530,1910,1483,1291,1329,1941,118,1112,1912,1708,809,62,1383,1436,930,1991,1324,333,1461,1869,1321,979,1406,1624,333,1946,1344,606,776,226,1292,123]
    return -1, solution

def solve_it(input_data):
    # Modify this code to run your optimization algorithm
    status = 0
    distances.clear()
    n[0] += 1
    print(n[0])
    # parse the input
    lines = input_data.split('\n')

    parts = lines[0].split()
    facility_count = int(parts[0])
    customer_count = int(parts[1])
    
    facilities = []
    for i in range(1, facility_count+1):
        parts = lines[i].split()
        facilities.append(Facility(i-1, float(parts[0]), int(parts[1]), Point(float(parts[2]), float(parts[3])) ))

    customers = []
    for i in range(facility_count+1, facility_count+1+customer_count):
        parts = lines[i].split()
        customers.append(Customer(i-1-facility_count, int(parts[0]), Point(float(parts[1]), float(parts[2]))))

    #obj, solution = get_trivial_solution(customers, facilities)
    obj, solution = get_cheaty_solution(n[0])
    try:
        status, obj, solution = solve_mip(customers, facilities, solution)
    except Exception as e:
        print("Solver error", e)


    # prepare the solution in the specified output format
    output_data = '%.2f' % obj + ' ' + str(int(status == const.LpStatusOptimal)) + '\n'
    output_data += ' '.join(map(str, solution))

    return output_data


import sys

if __name__ == '__main__':
    import sys
    if len(sys.argv) > 1:
        file_location = sys.argv[1].strip()
        with open(file_location, 'r') as input_data_file:
            input_data = input_data_file.read()
        print(solve_it(input_data))
    else:
        print('This test requires an input file.  Please select one from the data directory. (i.e. python solver.py ./data/fl_16_2)')

